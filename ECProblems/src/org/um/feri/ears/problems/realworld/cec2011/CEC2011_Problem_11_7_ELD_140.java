package org.um.feri.ears.problems.realworld.cec2011;


import org.um.feri.ears.problems.Problem;
import org.um.feri.ears.util.Util;

/**
 * Problem function!
 * 
 * @author Matej Črepinšek
 * @version 1
 * 
 **/	
public class CEC2011_Problem_11_7_ELD_140 extends Problem {
	private double g_constrains[]; //internal
	/*
*/
	private static double[][] Data1= {{71,119,1220.645,61.24200,0.03288800,0,0},
			{120,189,1315.118,41.09500,0.008280000,0,0},
			{125,190,874.2880,46.31000,0.003849000,0,0},
			{125,190,874.2880,46.31000,0.003849000,0,0},
			{90,190,1976.469,54.24200,0.04246800,700,0.08},
			{90,190,1338.087,61.21500,0.01499200,0,0},
			{280,490,1818.299,11.79100,0.007039000,0,0},
			{280,490,1133.978,15.05500,0.003079000,0,0},
			{260,496,1320.636,13.22600,0.005063000,0,0},
			{260,496,1320.636,13.22600,0.005063000,600,0.055},
			{260,496,1320.636,13.22600,0.005063000,0,0},
			{260,496,1106.539,14.49800,0.003552000,0,0},
			{260,506,1176.504,14.65100,0.003901000,0,0},
			{260,509,1176.504,14.65100,0.003901000,0,0},
			{260,506,1176.504,14.65100,0.003901000,800,0.06},
			{260,505,1176.504,14.65100,0.003901000,0,0},
			{260,506,1017.406,15.66900,0.002393000,0,0},
			{260,506,1017.406,15.66900,0.002393000,0,0},
			{260,505,1229.131,14.65600,0.003684000,0,0},
			{260,505,1229.131,14.65600,0.003684000,0,0},
			{260,505,1229.131,14.65600,0.003684000,0,0},
			{260,505,1229.131,14.65600,0.003684000,600,0.05},
			{260,505,1267.894,14.37800,0.004004000,0,0},
			{260,505,1229.131,14.65600,0.003684000,0,0},
			{280,537,975.9260,16.26100,0.001619000,0,0},
			{280,537,1532.093,13.36200,0.005093000,0,0},
			{280,549,641.9890,17.20300,0.0009930000,0,0},
			{280,549,641.9890,17.20300,0.0009930000,0,0},
			{260,501,911.5330,15.27400,0.002473000,0,0},
			{260,501,910.5330,15.21200,0.002547000,0,0},
			{260,506,1074.810,15.03300,0.003542000,0,0},
			{260,506,1074.810,15.03300,0.003542000,0,0},
			{260,506,1074.810,15.03300,0.003542000,600,0.043},
			{260,506,1074.810,15.03300,0.003542000,0,0},
			{260,500,1278.460,13.99200,0.003132000,0,0},
			{260,500,861.7420,15.67900,0.001323000,0,0},
			{120,241,408.8340,16.54200,0.002950000,0,0},
			{120,241,408.8340,16.54200,0.002950000,0,0},
			{423,774,1288.815,16.51800,0.0009910000,0,0},
			{423,769,1436.251,15.81500,0.001581000,600,0.043},
			{3,19,699.9880,75.46400,0.9023600,0,0},
			{3,28,134.5440,129.5440,0.1102950,0,0},
			{160,250,3427.912,56.61300,0.02449300,0,0},
			{160,250,3751.772,54.45100,0.02915600,0,0},
			{160,250,3918.780,54.73600,0.02466700,0,0},
			{160,250,3379.580,58.03400,0.01651700,0,0},
			{160,250,3345.296,55.98100,0.02658400,0,0},
			{160,250,3138.754,61.52000,0.007540000,0,0},
			{160,250,3453.050,58.63500,0.01643000,0,0},
			{160,250,5119.300,44.64700,0.04593400,0,0},
			{165,504,1898.415,71.58400,4.4e-05,0,0},
			{165,504,1898.415,71.58400,4.4e-05,1100,0.043},
			{165,504,1898.415,71.58400,4.4e-05,0,0},
			{165,504,1898.415,71.58400,4.4e-05,0,0},
			{180,471,2473.390,85.12000,0.002528000,0,0},
			{180,561,2781.705,87.68200,0.0001310000,0,0},
			{103,341,5515.508,69.53200,0.01037200,0,0},
			{198,617,3478.300,78.33900,0.007627000,0,0},
			{100,312,6240.909,58.17200,0.01246400,0,0},
			{153,471,9960.110,46.63600,0.03944100,0,0},
			{163,500,3671.997,76.94700,0.007278000,0,0},
			{95,302,1837.383,80.76100,4.4e-05,0,0},
			{160,511,3108.395,70.13600,4.4e-05,0,0},
			{160,511,3108.395,70.13600,4.4e-05,0,0},
			{196,490,7095.484,49.84000,0.01882700,0,0},
			{196,490,3392.732,65.40400,0.01085200,0,0},
			{196,490,7095.484,49.84000,0.01882700,0,0},
			{196,490,7095.484,49.84000,0.01882700,0,0},
			{130,432,4288.320,66.46500,0.03456000,0,0},
			{130,432,13813.0010,22.94100,0.08154000,1200,0.03},
			{137,455,4435.493,64.31400,0.02353400,0,0},
			{137,455,9750.750,45.01700,0.03547500,1000,0.05},
			{195,541,1042.366,70.64400,0.0009150000,0,0},
			{175,536,1159.895,70.95900,4.4e-05,0,0},
			{175,540,1159.895,70.95900,4.4e-05,0,0},
			{175,538,1303.990,70.30200,0.001307000,0,0},
			{175,540,1156.193,70.66200,0.0003920000,0,0},
			{330,574,2118.968,71.10100,8.7e-05,0,0},
			{160,531,779.5190,37.85400,0.0005210000,0,0},
			{160,531,829.8880,37.76800,0.0004980000,0,0},
			{200,542,2333.690,67.98300,0.001046000,0,0},
			{56,132,2028.954,77.83800,0.1320500,0,0},
			{115,245,4412.017,63.67100,0.09696800,0,0},
			{115,245,2982.219,79.45800,0.05486800,1000,0.05},
			{115,245,2982.219,79.45800,0.05486800,0,0},
			{207,307,3174.939,93.96600,0.01438200,0,0},
			{207,307,3218.359,94.72300,0.01316100,0,0},
			{175,345,3723.822,66.91900,0.01603300,0,0},
			{175,345,3551.405,68.18500,0.01365300,0,0},
			{175,345,4332.615,60.82100,0.02814800,0,0},
			{175,345,3493.739,68.55100,0.01347000,0,0},
			{360,580,226.7990,2.842000,6.4e-05,0,0},
			{415,645,382.9320,2.946000,0.0002520000,0,0},
			{795,984,156.9870,3.096000,2.2e-05,0,0},
			{795,978,154.4840,3.040000,2.2e-05,0,0},
			{578,682,332.8340,1.709000,0.0002030000,0,0},
			{615,720,326.5990,1.668000,0.0001980000,0,0},
			{612,718,345.3060,1.789000,0.0002150000,0,0},
			{612,720,350.3720,1.815000,0.0002180000,0,0},
			{758,964,370.3770,2.726000,0.0001930000,0,0},
			{755,958,367.0670,2.732000,0.0001970000,0,0},
			{750,1007,124.8750,2.651000,0.0003240000,0,0},
			{750,1006,130.7850,2.798000,0.0003440000,0,0},
			{713,1013,878.7460,1.595000,0.00069,0,0},
			{718,1020,827.9590,1.503000,0.00065,0,0},
			{791,954,432.0070,2.425000,0.0002330000,0,0},
			{786,952,445.6060,2.499000,0.0002390000,0,0},
			{795,1006,467.2230,2.674000,0.0002610000,0,0},
			{795,1013,475.9400,2.692000,0.0002590000,0,0},
			{795,1021,899.4620,1.633000,0.0007070000,0,0},
			{795,1015,1000.367,1.816000,0.0007860000,0,0},
			{94,203,1269.132,89.83000,0.01435500,0,0},
			{94,203,1269.132,89.83000,0.01435500,0,0},
			{94,203,1269.132,89.83000,0.01435500,0,0},
			{244,379,4965.124,64.12500,0.03026600,0,0},
			{244,379,4965.124,64.12500,0.03026600,0,0},
			{244,379,4965.124,64.12500,0.03026600,0,0},
			{95,190,2243.185,76.12900,0.02402700,0,0},
			{95,189,2290.381,81.80500,0.001580000,600,0.07},
			{116,194,1681.533,81.14000,0.02209500,0,0},
			{175,321,6743.302,46.66500,0.07681000,1200,0.043},
			{2,19,394.3980,78.41200,0.9534430,0,0},
			{4,59,1243.165,112.0880,4.4e-05,0,0},
			{15,83,1454.740,90.87100,0.07246800,0,0},
			{9,53,1011.051,97.11600,0.0004480000,0,0},
			{12,37,909.2690,83.24400,0.5991120,0,0},
			{10,34,689.3780,95.66500,0.2447060,0,0},
			{112,373,1443.792,91.20200,4.2e-05,0,0},
			{4,20,535.5530,104.5010,0.08514500,0,0},
			{5,38,617.7340,83.01500,0.5247180,0,0},
			{5,19,90.96600,127.7950,0.1765150,0,0},
			{50,98,974.4470,77.92900,0.06341400,0,0},
			{5,10,263.8100,92.77900,2.740485,0,0},
			{42,74,1335.594,80.95000,0.1124380,0,0},
			{42,74,1033.871,89.07300,0.04152900,0,0},
			{41,105,1391.325,161.2880,0.0009110000,0,0},
			{17,51,4477.110,161.8290,0.005245000,0,0},
			{7,19,57.79400,84.97200,0.2347870,0,0},
			{7,19,57.79400,84.97200,0.2347870,0,0},
			{26,40,1258.437,16.08700,1.111878,0,0}};

	//        % % % ============= 6 unit system data ==========
	//        % Data1=  [Pmin   Pmax     a       b           c]; 
	/*private static double[][] Data1= {{71,  119,  1220.645,  61.242,  0.032888},
		{120,  189,  1315.118,  41.095,  0.00828},
		{125,  190,  874.288,   46.31,   0.003849},
		{125,  190,  874.288,   46.31,   0.003849},
		{90,   190,  1976.469,  54.242,  0.042468},
		{90,   190,  1338.087,  61.215,  0.014992},
		{280,  490,  1818.299,  11.791,  0.007039},
		{280,  490,  1133.978,  15.055,  0.003079},
		{260,  496,  1320.636,  13.226,  0.005063},
		{260,  496,  1320.636,  13.226,  0.005063},
		{260,  496,  1320.636,  13.226,  0.005063},
		{260,  496,  1106.539,  14.498,  0.003552},
		{260,  506,  1176.504,  14.651,  0.003901},
		{260,  509,  1176.504,  14.651,  0.003901},
		{260,  506,  1176.504,  14.651,  0.003901},
		{260,  505,  1176.504,  14.651,  0.003901},
		{260,  506,  1017.406,  15.669,  0.002393},
		{260,  506,  1017.406,  15.669,  0.002393},
		{260,  505,  1229.131,  14.656,  0.003684},
		{260,  505,  1229.131,  14.656,  0.003684},
		{260,  505,  1229.131,  14.656,  0.003684},
		{260,  505,  1229.131,  14.656,  0.003684},
		{260,  505,  1267.894,  14.378,  0.004004},
		{260,  505,  1229.131,  14.656,  0.003684},
		{280,  537,  975.926,   16.261,  0.001619},
		{280,  537,  1532.093,  13.362,  0.005093},
		{280,  549,  641.989,   17.203,  0.000993},
		{280,  549,  641.989,   17.203,  0.000993},
		{260,  501,  911.533,   15.274,  0.002473},
		{260,  501,  910.533,   15.212,  0.002547},
		{260,  506,  1074.81,   15.033,  0.003542},
		{260,  506,  1074.81,   15.033,  0.003542},
		{260,  506,  1074.81,   15.033,  0.003542},
		{260,  506,  1074.81,   15.033,  0.003542},
		{260,  500,  1278.46,   13.992,  0.003132},
		{260,  500,  861.742,   15.679,  0.001323},
		{120,  241,  408.834,   16.542,  0.00295},
		{120,  241,  408.834,   16.542,  0.00295},
		{423,  774,  1288.815,  16.518,  0.000991},
		{423,  769,  1436.251,  15.815,  0.001581},
		{3,    19,   699.988,   75.464,  0.90236},
		{3,    28,   134.544,   129.544, 0.110295},
		{160,  250,  3427.912,  56.613,  0.024493},
		{160,  250,  3751.772,  54.451,  0.029156},
		{160,  250,  3918.78,   54.736,  0.024667},
		{160,  250,  3379.58,   58.034,  0.016517},
		{160,  250,  3345.296,  55.981,  0.026584},
		{160,  250,  3138.754,  61.52,   0.00754},
		{160,  250,  3453.05,   58.635,  0.01643},
		{160,  250,  5119.3,    44.647,  0.045934},
		{165,  504,  1898.415,  71.584,  0.000044},
		{165,  504,  1898.415,  71.584,  0.000044},
		{165,  504,  1898.415,  71.584,  0.000044},
		{165,  504,  1898.415,  71.584,  0.000044},
		{180,  471,  2473.39,   85.12,   0.002528},
		{180,  561,  2781.705,  87.682,  0.000131},
		{103,  341,  5515.508,  69.532,  0.010372},
		{198,  617,  3478.3,    78.339,  0.007627},
		{100,  312,  6240.909,  58.172,  0.012464},
		{153,  471,  9960.11,   46.636,  0.039441},
		{163,  500,  3671.997,  76.947,  0.007278},
		{95,   302,  1837.383,  80.761,  0.000044},
		{160,  511,  3108.395,  70.136,  0.000044},
		{160,  511,  3108.395,  70.136,  0.000044},
		{196,  490,  7095.484,  49.84,   0.018827},
		{196,  490,  3392.732,  65.404,  0.010852},
		{196,  490,  7095.484,  49.84,   0.018827},
		{196,  490,  7095.484,  49.84,   0.018827},
		{130,  432,  4288.32,   66.465,  0.03456},
		{130,  432,  13813.001, 22.941,  0.08154},
		{137,  455,  4435.493,  64.314,  0.023534},
		{137,  455,  9750.75,   45.017,  0.035475},
		{195,  541,  1042.366,  70.644,  0.000915},
		{175,  536,  1159.895,  70.959,  0.000044},
		{175,  540,  1159.895,  70.959,  0.000044},
		{175,  538,  1303.99,   70.302,  0.001307},
		{175,  540,  1156.193,  70.662,  0.000392},
		{330,  574,  2118.968,  71.101,  0.000087},
		{160,  531,  779.519,   37.854,  0.000521},
		{160,  531,  829.888,   37.768,  0.000498},
		{200,  542,  2333.69,   67.983,  0.001046},
		{56,   132,  2028.954,  77.838,  0.13205},
		{115,  245,  4412.017,  63.671,  0.096968},
		{115,  245,  2982.219,  79.458,  0.054868},
		{115,  245,  2982.219,  79.458,  0.054868},
		{207,  307,  3174.939,  93.966,  0.014382},
		{207,  307,  3218.359,  94.723,  0.013161},
		{175,  345,  3723.822,  66.919,  0.016033},
		{175,  345,  3551.405,  68.185,  0.013653},
		{175,  345,  4332.615,  60.821,  0.028148},
		{175,  345,  3493.739,  68.551,  0.01347},
		{360,  580,  226.799,   2.842,   0.000064},
		{415,  645,  382.932,   2.946,   0.000252},
		{795,  984,  156.987,   3.096,   0.000022},
		{795,  978,  154.484,   3.04,    0.000022},
		{578,  682,  332.834,   1.709,   0.000203},
		{615,  720,  326.599,   1.668,   0.000198},
		{612,  718,  345.306,   1.789,   0.000215},
		{612,  720,  350.372,   1.815,   0.000218},
		{758,  964,  370.377,   2.726,   0.000193},
		{755,  958,  367.067,   2.732,   0.000197},
		{750,  1007, 124.875,   2.651,   0.000324},
		{750,  1006, 130.785,   2.798,   0.000344},
		{713,  1013, 878.746,   1.595,   0.00069},
		{718,  1020, 827.959,   1.503,   0.00065},
		{791,  954,  432.007,   2.425,   0.000233},
		{786,  952,  445.606,   2.499,   0.000239},
		{795,  1006, 467.223,   2.674,   0.000261},
		{795,  1013, 475.94,    2.692,   0.000259},
		{795,  1021, 899.462,   1.633,   0.000707},
		{795,  1015, 1000.367,  1.816,   0.000786},
		{94,   203,  1269.132,  89.83,   0.014355},
		{94,   203,  1269.132,  89.83,   0.014355},
		{94,   203,  1269.132,  89.83,   0.014355},
		{244,  379,  4965.124,  64.125,  0.030266},
		{244,  379,  4965.124,  64.125,  0.030266},
		{244,  379,  4965.124,  64.125,  0.030266},
		{95,   190,  2243.185,  76.129,  0.024027},
		{95,   189,  2290.381,  81.805,  0.00158},
		{116,  194,  1681.533,  81.14,   0.022095},
		{175,  321,  6743.302,  46.665,  0.07681},
		{2,    19,   394.398,   78.412,  0.953443},
		{4,    59,   1243.165,  112.088, 0.000044},
		{15,   83,   1454.74,   90.871,  0.072468},
		{9,    53,   1011.051,  97.116,  0.000448},
		{12,   37,   909.269,   83.244,  0.599112},
		{10,   34,   689.378,   95.665,  0.244706},
		{112,  373,  1443.792,  91.202,  0.000042},
		{4,    20,   535.553,   104.501, 0.085145},
		{5,    38,   617.734,   83.015,  0.524718},
		{5,    19,   90.966,    127.795, 0.176515},
		{50,   98,   974.447,   77.929,  0.063414},
		{5,    10,   263.81,    92.779,  2.740485},
		{42,   74,   1335.594,  80.95,   0.112438},
		{42,   74,   1033.871,  89.073,  0.041529},
		{41,   105,  1391.325,  161.288, 0.000911},
		{17,   51,   4477.11,   161.829, 0.005245},
		{7,    19,   57.794,    84.972,  0.234787},
		{7,    19,   57.794,    84.972,  0.234787},
		{26,   40,   1258.437,  16.087,  1.111878}};

*/
	private static double[][] Data2= {{  98.4,   30,   120, 0,0,0,0,0,0},
		{134,    30,   120, 0,0,0,0,0,0},
		{141.5,  60,   60, 0,0,0,0,0,0},
		{183.3,  60,   60, 0,0,0,0,0,0},
		{125,    150,  150, 0,0,0,0,0,0},
		{91.3,   150,  150, 0,0,0,0,0,0},
		{401.1,  180,  300, 0,0,0,0,0,0},
		{329.5,  180,  300,250,280,305,335,420,450},
		{386.1,  300,  510, 0,0,0,0,0,0},
		{427.3,  300,  510, 0,0,0,0,0,0},
		{412.2,  300,  510, 0,0,0,0,0,0},
		{370.1,  300,  510, 0,0,0,0,0,0},
		{301.8,  600,  600, 0,0,0,0,0,0},
		{368,    600,  600, 0,0,0,0,0,0},
		{301.9,  600,  600, 0,0,0,0,0,0},
		{476.4,  600,  600, 0,0,0,0,0,0},
		{283.1,  600,  600, 0,0,0,0,0,0},
		{414.1,  600,  600, 0,0,0,0,0,0},
		{328,    600,  600, 0,0,0,0,0,0},
		{389.4,  600,  600, 0,0,0,0,0,0},
		{354.7,  600,  600, 0,0,0,0,0,0},
		{262,    600,  600, 0,0,0,0,0,0},
		{461.5,  600,  600, 0,0,0,0,0,0},
		{371.6,  600,  600, 0,0,0,0,0,0},
		{462.6,  300,  300, 0,0,0,0,0,0},
		{379.2,  300,  300, 0,0,0,0,0,0},
		{530.8,  360,  360, 0,0,0,0,0,0},
		{391.9,  360,  360, 0,0,0,0,0,0},
		{480.1,  180,  180, 0,0,0,0,0,0},
		{319,    180,  180, 0,0,0,0,0,0},
		{329.5,  600,  600, 0,0,0,0,0,0},
		{333.8,  600,  600,220,250,320,350,390,420},
		{390,    600,  600, 0,0,0,0,0,0},
		{432,    600,  600, 0,0,0,0,0,0},
		{402,    660,  660, 0,0,0,0,0,0},
		{428,    900,  900, 0,0,0,0,0,0},
		{178.4,  180,  180, 0,0,0,0,0,0},
		{194.1,  180,  180, 0,0,0,0,0,0},
		{474,    600,  600, 0,0,0,0,0,0},
		{609.8,  600,  600, 0,0,0,0,0,0},
		{17.8,   210,  210, 0,0,0,0,0,0},
		{6.9,    366,  366, 0,0,0,0,0,0},
		{224.3,  702,  702, 0,0,0,0,0,0},
		{210,    702,  702, 0,0,0,0,0,0},
		{212,    702,  702, 0,0,0,0,0,0},
		{200.8,  702,  702, 0,0,0,0,0,0},
		{220,    702,  702, 0,0,0,0,0,0},
		{232.9,  702,  702, 0,0,0,0,0,0},
		{168,    702,  702, 0,0,0,0,0,0},
		{208.4,  702,  702, 0,0,0,0,0,0},
		{443.9,  1350, 1350, 0,0,0,0,0,0},
		{426.0,  1350, 1350, 0,0,0,0,0,0},
		{434.1,  1350, 1350, 0,0,0,0,0,0},
		{402.5,  1350, 1350, 0,0,0,0,0,0},
		{357.4,  1350, 1350, 0,0,0,0,0,0},
		{423,    720,  720, 0,0,0,0,0,0},
		{220,    720,  720, 0,0,0,0,0,0},
		{369.4,  2700, 2700, 0,0,0,0,0,0},
		{273.5,  1500, 1500, 0,0,0,0,0,0},
		{336,    1656, 1656, 0,0,0,0,0,0},
		{432,    2160, 2160, 0,0,0,0,0,0},
		{220,    900,  900, 0,0,0,0,0,0},
		{410.6,  1200, 1200, 0,0,0,0,0,0},
		{422.7,  1200, 1200, 0,0,0,0,0,0},
		{351,    1014, 1014, 0,0,0,0,0,0},
		{296,    1014, 1014, 0,0,0,0,0,0},
		{411.1,  1014, 1014, 0,0,0,0,0,0},
		{263.2,  1014, 1014, 0,0,0,0,0,0},
		{370.3,  1350, 1350, 0,0,0,0,0,0},
		{418.7,  1350, 1350, 0,0,0,0,0,0},
		{409.6,  1350, 1350, 0,0,0,0,0,0},
		{412,    1350, 1350, 0,0,0,0,0,0},
		{423.2,  780,  780, 0,0,0,0,0,0},
		{428,    1650, 1650,230,255,365,395,430,455},
		{436,    1650, 1650, 0,0,0,0,0,0},
		{428,    1650, 1650, 0,0,0,0,0,0},
		{425,    1650, 1650, 0,0,0,0,0,0},
		{497.2,  1620, 1620, 0,0,0,0,0,0},
		{510,    1482, 1482, 0,0,0,0,0,0},
		{470,    1482, 1482, 0,0,0,0,0,0},
		{464.1,  1668, 1668, 0,0,0,0,0,0},
		{118.1,  120,  120, 0,0,0,0,0,0},
		{141.3,  180,  180, 0,0,0,0,0,0},
		{132,    120,  180, 0,0,0,0,0,0},
		{135,    120,  180, 0,0,0,0,0,0},
		{252,    120,  180, 0,0,0,0,0,0},
		{221,    120,  180, 0,0,0,0,0,0},
		{245.9,  318,  318, 0,0,0,0,0,0},
		{247.9,  318,  318, 0,0,0,0,0,0},
		{183.6,  318,  318, 0,0,0,0,0,0},
		{288,    318,  318, 0,0,0,0,0,0},
		{557.4,  18,   18, 0,0,0,0,0,0},
		{529.5,  18,   18, 0,0,0,0,0,0},
		{800.8,  36,   36, 0,0,0,0,0,0},
		{801.5,  36,   36, 0,0,0,0,0,0},
		{582.7,  138,  204, 0,0,0,0,0,0},
		{680.7,  144,  216, 0,0,0,0,0,0},
		{670.7,  144,  216, 0,0,0,0,0,0},
		{651.7,  144,  216, 0,0,0,0,0,0},
		{921,    48,   48, 0,0,0,0,0,0},
		{916.8,  48,   48, 0,0,0,0,0,0},
		{911.9,  36,   54, 0,0,0,0,0,0},
		{898,    36,   54, 0,0,0,0,0,0},
		{905,    30,   30, 0,0,0,0,0,0},
		{846.5,  30,   30, 0,0,0,0,0,0},
		{850.9,  30,   30, 0,0,0,0,0,0},
		{843.7,  30,   30, 0,0,0,0,0,0},
		{841.4,  36,   36, 0,0,0,0,0,0},
		{835.7,  36,   36, 0,0,0,0,0,0},
		{828.8,  36,   36, 0,0,0,0,0,0},
		{846,    36,   36, 0,0,0,0,0,0},
		{179,    120,  120, 0,0,0,0,0,0},
		{120.8,  120,  120, 0,0,0,0,0,0},
		{121,    120,  120, 0,0,0,0,0,0},
		{317.4,  480,  480, 0,0,0,0,0,0},
		{318.4,  480,  480, 0,0,0,0,0,0},
		{335.8,  480,  480, 0,0,0,0,0,0},
		{151,    240,  240, 0,0,0,0,0,0},
		{129.5,  240,  240, 0,0,0,0,0,0},
		{130,    120,  120, 0,0,0,0,0,0},
		{218.9,  180,  180, 0,0,0,0,0,0},
		{5.4,    90,   90, 0,0,0,0,0,0},
		{45,     90,   90, 0,0,0,0,0,0},
		{20,     300,  300, 0,0,0,0,0,0},
		{16.3,   162,  162, 0,0,0,0,0,0},
		{20,     114,  114, 0,0,0,0,0,0},
		{22.1,   120,  120, 0,0,0,0,0,0},
		{125,    1080, 1080, 0,0,0,0,0,0},
		{10,     60,   60, 0,0,0,0,0,0},
		{13,     66,   66, 0,0,0,0,0,0},
		{7.5,    12,   6, 0,0,0,0,0,0},
		{53.2,   300,  300, 0,0,0,0,0,0},
		{6.4,    6,    6, 0,0,0,0,0,0},
		{69.1,   60,   60, 0,0,0,0,0,0},
		{49.9,   60,   60, 0,0,0,0,0,0},
		{91,     528,  528,50,75,85,95,0,0},
		{41,     300,  300, 0,0,0,0,0,0},
		{13.7,   18,   30, 0,0,0,0,0,0},
		{7.4,    18,   30, 0,0,0,0,0,0},
		{28.6,   72,   120, 0,0,0,0,0,0}};
	private static double[][] Data3 ={{5,  700,  0.080},
			  {10, 600,  0.055},
			  {15, 800,  0.060},
			  {22, 600,  0.050},
			  {33, 600,  0.043},
			  {40, 600,  0.043},
			  {52, 1100, 0.043},
			  {70, 1200, 0.030},
			  {72, 1000, 0.050},
			  {84, 1000, 0.050},
			  {119,600,  0.070},
			  {121,1200, 0.043}};
	private static double[][] Data4 = {{    8,  250,   280,   305,  335,   420,   450},
					  {32, 220,   250,   320,  350,   390,   420},
					  {74, 230,   255,   365,  395,   430,   455},
					  {136,50,    75,    85,   95,    0,     0}}; 
    //% Loss Co-efficients
	private static double[][] B1={ };	
	private static double[] B2={};
	private static double B3=0;
	
	
	private static double Power_Demand = 49342;; // in MW
	
	private static int Pmin_data1_col=0;// = Data1(:,1)'; 
	private static int Pmax_data1_col=1;// = Data1(:,2)';

	private static int a_data1_col=4;
	private static int b_data1_col=3;
	private static int c_data1_col=2;
	private static int e_data1_col=5;
	private static int f_data1_col=6;
	private static int Initial_Generations_data2_col=0;
	private static int Up_Ramp_data2_col=1;
	private static int Down_Ramp_data2_col=2;


	public CEC2011_Problem_11_7_ELD_140() {
		dim = 140;
		constrains = 4;//
		interval = new double[dim];
		intervalL = new double[dim];
		for (int z=0; z<dim; z++) {
			intervalL[z] = Data1[z][0];
			interval[z] = Data1[z][1]- intervalL[z];
			
		}
		name = "RWP_11_7_ELD_140";
		desc = "RWP_11_7_ELD_140 Static Economic Load Dispatch (ELD) Problem ";
	}
	
	private double produkt(double x[], double y[]) {
		double t=0;
		for (int i=0;i<x.length; i++) {
			t+=x[i]*y[i];
		}
		return t;
	}
	private double[] produkt2(double x[],double y[][]) {
		double t[]=new double[dim]; //dim??
		for (int i=0;i<x.length; i++) {
			double tt=0;
			for (int ii=0;ii<x.length; ii++) {
				tt+=x[i]*y[ii][i];
			}
			t[i]=tt;
		}
		return t;
	}
	protected double sum(double x[]) {
		double tt=0;
		for (int ii=0;ii<x.length; ii++) {
			tt+=x[ii];
		}
		return tt;
	}
	public static double Up_Ramp_Limit(int i) {
		//System.out.println("Pmax "+Data1[i][Pmax_data1_col]+" Initial_Generations:"+Data2[i][Initial_Generations_data2_col]+" Up_Ramp:"+Data2[i][Up_Ramp_data2_col]+" "+Data2[i][Initial_Generations_data2_col]+Data2[i][Up_Ramp_data2_col]);
		return Math.min(Data1[i][Pmax_data1_col],Data2[i][Initial_Generations_data2_col]+Data2[i][Up_Ramp_data2_col]);
	}
	//Down_Ramp_Limit = max(Pmin,Initial_Generations-Down_Ramp);
	public static double Down_Ramp_Limit(int i) {
		return Math.max(Data1[i][Pmin_data1_col],Data2[i][Initial_Generations_data2_col]-Data2[i][Down_Ramp_data2_col]);
	}
	public static int No_of_POZ_Limits() {
		//System.out.println(Data2[0].length-4+1);
		return Data2[0].length-4+1;
	}
	public static double Prohibited_Operating_Zones_POZ(int i, int j) { //y,x
		//System.out.println("D2="+D2+" len:"+Data2.length);
		return Data2[j][3+i];
	}
	public static double POZ_Lower_Limits(int i, int j) {
		return Prohibited_Operating_Zones_POZ(i*2,j);
	}

	public static double POZ_Upper_Limits(int i, int j) {
		return Prohibited_Operating_Zones_POZ(i*2+1,j);
	}
	
	public double[] calc_constrains(double x[]) {
		g_constrains = new double[constrains];
		double Power_Loss = 0;
		double  Power_Balance_Penalty = Math.abs(Power_Demand + Power_Loss - sum(x));
        double Capacity_Limits_Penalty=0;
        for (int i=0; i<dim; i++) { //Capacity_Limits_Penalty = sum(abs(x-Pmin)-(x-Pmin)) + sum(abs(Pmax-x)-(Pmax-x));
       	 Capacity_Limits_Penalty+=Math.abs(x[i]-Data1[i][Pmin_data1_col])-(x[i]-Data1[i][Pmin_data1_col]); //sum(abs(x-Pmin)-(x-Pmin))
       	 Capacity_Limits_Penalty+=Math.abs(Data1[i][Pmax_data1_col]-x[i])-(Data1[i][Pmax_data1_col]-x[i]); //sum(abs(Pmax-x)-(Pmax-x))
        }
        double Ramp_Limits_Penalty=0;
        for (int i=0; i<dim; i++) { // Ramp_Limits_Penalty = sum(abs(x-Down_Ramp_Limit)-(x-Down_Ramp_Limit)) + sum(abs(Up_Ramp_Limit-x)-(Up_Ramp_Limit-x));
       	 Ramp_Limits_Penalty+=Math.abs(x[i]-Down_Ramp_Limit(i))-(x[i]-Down_Ramp_Limit(i)); //sum(abs(x-Down_Ramp_Limit)-(x-Down_Ramp_Limit))
       	 Ramp_Limits_Penalty+=Math.abs(Up_Ramp_Limit(i)-x[i])-(Up_Ramp_Limit(i)-x[i]); //sum(abs(Up_Ramp_Limit-x)-(Up_Ramp_Limit-x));
        }
//         System.out.println("Ramp_Limits_Penalty="+Ramp_Limits_Penalty);
        double POZ_Penalty=0;
        //temp_x = repmat(x,No_of_POZ_Limits/2,1);
		 //POZ_Penalty = sum(sum((POZ_Lower_Limits<temp_x & temp_x<POZ_Upper_Limits).*min(temp_x-POZ_Lower_Limits,POZ_Upper_Limits-temp_x)));
       for (int j=0; j<No_of_POZ_Limits()/2; j++) {
       	 for (int i=0; i<dim; i++) {
       		 if ((POZ_Lower_Limits(j,i)<x[i]) && (x[i]<POZ_Upper_Limits(j,i))) {
       			 POZ_Penalty+=Math.min(x[i]-POZ_Lower_Limits(j, i), POZ_Upper_Limits(j, i)-x[i]);
       		 }
       	 }
       }

       g_constrains[0] = 1e7*Power_Balance_Penalty;
       g_constrains[1] = 1e5*Capacity_Limits_Penalty;
       g_constrains[2] = 1e7*Ramp_Limits_Penalty ; 
       g_constrains[3] = 1e5*POZ_Penalty ; 


		return g_constrains; //do I need deep copy?
	}
	
	public double eval(double x[]) {

	      
	        double f = 0,ff;
	        for (int i=0; i<dim; i++) {
	        	ff=Data1[i][a_data1_col]*x[i]*x[i]+Data1[i][b_data1_col]*x[i]+Data1[i][c_data1_col]+Math.abs(Data1[i][e_data1_col]*Math.sin(Data1[i][e_data1_col]*(Data1[i][Pmin_data1_col]-x[i])));
	        	//System.out.print(ff+" ");
	        	f+=ff;
	        }
	        //System.out.println();
	       // System.out.println("f:"+f+" Total_Penalty:"+Total_Penalty);
		
	  

		return f;
	}
	public double eval11(double x[]) {

	      
        double f = 0,ff;
        System.out.print("a ");
        for (int i=0; i<20; i++) {
        	System.out.print(Data1[i][a_data1_col]+" ");
  
        }
        System.out.println();

        for (int i=0; i<20; i++) {
        	ff=Data1[i][a_data1_col]*x[i]*x[i]+Data1[i][b_data1_col]*x[i]+Data1[i][c_data1_col]+Math.abs(Data1[i][e_data1_col]*Math.sin(Data1[i][e_data1_col]*(Data1[i][Pmin_data1_col]-x[i])));
        	System.out.print(ff+" ");
        	f+=ff;
        }
        System.out.println();
       // System.out.println("f:"+f+" Total_Penalty:"+Total_Penalty);
	
  

	return f;
}


	public double getOptimumEval() {
		return 0; //OK
	}

	

}